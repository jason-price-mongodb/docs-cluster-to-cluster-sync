.. _c2c-beta-destination-data-handling:

=========================================================
Control Sync Behavior with destinationDataHandling Option
=========================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Starting in ``mongosync-beta`` 1.8, use the ``destinationDataHandling``
option to define the sync behavior if the destination cluster is empty.
Previous ``mongosync`` versions return an error if the destination
cluster is empty.

Syntax
------

To enable the ``destinationDataHandling`` option, run:

.. code-block:: shell

   mongosync <options> --enableFeatures destinationDataHandling

For the other ``mongosync`` options, see :ref:`c2c-mongosync`.

To set a string for ``destinationDataHandling``, use ``curl``:

.. code-block:: shell

   curl <host>:<port>/api/v1/start -XPOST \
   --data '
      {
         <options>,
         "destinationDataHandling": <string>
      } '

The following table shows the string settings:

.. list-table::
   :header-rows: 1
   :widths: 20 80
 
   * - String
     - Description
 
   * - ``"dropAllData"``
     - Mongosync will drop all destination databases
       except for the ``admin``, ``config``, ``local`` and
       ``mongosync_reserved_for_internal_use`` databases.
 
   * - ``"ignorePreExistingData"``
     - Mongosync will ignore any pre-existing
       user databases and collections on the destination. Mongosync will
       correctly detect any namespace conflicts upon initializing, but it
       is generally up to the user to ensure that their destination
       namespaces remain disjoint from the ones mongosync is replicating
       during the later Collection Copy and Change Event Application
       phases.

If you omit the string, and the destination cluster is not empty,
``mongosync`` returns an error. Otherwise, ``mongosync`` continues the
sync.

Examples
--------

For example, if mongosync is started like this:

.. code-block:: shell

   mongosync --port 27182 ... --enableFeatures destinationDataHandling

It can optionally accept the ``"destinationDataHandling"`` parameter
like this:

.. code-block:: shell

   curl localhost:27182/api/v1/start -XPOST \
   --data '
      {
         "source": "cluster0",
         "destination": "cluster1",
         ...,
         "destinationDataHandling": "dropAllData"  // or "ignorePreExistingData"
      } '

Mongosync will log messages like this if it was started with
``"dropAllData"``:

Dropping 3 pre-existing databases on the destination: [ sales, marketing, engineering ]
Dropped 3 pre-existing databases on the destination: [ sales, marketing, engineering ]

And will log messages like this if it was started with
``"ignorePreExistingData"``, given no conflicts:

Found 5 destination collections. Resolving them against source collections.
Checking for conflicts between source namespaces and pre-existing destination namespaces.
No conflicts detected between source namespaces and pre-existing destination namespaces.

Or will return an error like this if there was a conflict:

Found 3 conflicting namespaces between the source and the destination: {
sales : { records, teams }, engineering : { teams } }

When using the ``destinationDataHandling`` feature and starting
mongosync with ``"dropAllData"``, the users provided to mongosync will
require elevated roles. We need the ``clusterAdmin`` (or ``dbAdmin``)
role on the destination when using this flag, because the
``dropDatabase`` action is required to clean up preexisting data. This
is not provided by the ``restore`` role.

Learn More
----------
