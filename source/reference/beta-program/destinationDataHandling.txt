.. _c2c-beta-destination-data-handling:

=========================================================
Control Sync Behavior with destinationDataHandling Option
=========================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Starting in ``mongosync-beta`` 1.8, use the ``destinationDataHandling``
option to define the sync behavior if the destination cluster is empty.
Previous ``mongosync`` versions return an error if the destination
cluster is empty.

Syntax
------

To enable the ``destinationDataHandling`` option in ``mongosync``:

.. code-block:: shell

   mongosync <options> --enableFeatures destinationDataHandling

For the other ``mongosync`` options, see :ref:`c2c-mongosync`.

To set a string for ``destinationDataHandling``, use ``curl``:

.. code-block:: shell

   curl <host>:<port>/api/v1/start -XPOST \
   --data '
      {
         <options>,
         "destinationDataHandling": <string>
      } '

Command Field
-------------

The following table shows the strings you can set for
``"destinationDataHandling"`:

.. list-table::
   :header-rows: 1
   :widths: 20 80
 
   * - String
     - Description
 
   * - ``"dropAllData"``
     - Mongosync will drop all destination databases
       except for the ``admin``, ``config``, ``local`` and
       ``mongosync_reserved_for_internal_use`` databases.
 
   * - ``"ignorePreExistingData"``
     - Mongosync will ignore any pre-existing
       user databases and collections on the destination. Mongosync will
       correctly detect any namespace conflicts upon initializing, but it
       is generally up to the user to ensure that their destination
       namespaces remain disjoint from the ones mongosync is replicating
       during the later Collection Copy and Change Event Application
       phases.

If you omit the string, and the destination cluster is not empty,
``mongosync`` returns an error. Otherwise, ``mongosync`` continues the
sync.

Examples
--------

The following example connects a source cluster running locally on port
``27000`` with a destination cluster running on port ``35000``, and
enables ``destinationDataHandling``:

.. code-block:: shell

   mongosync \
      --cluster0 "mongodb://localhost:27000" \
      --cluster1 "mongodb://localhost:35000" \
      --enableFeatures destinationDataHandling

To drop any existing databases on the destination cluster, set the
``"destinationDataHandling"`` string to ``"dropAllData"``:

.. code-block:: shell

   curl localhost:27000/api/v1/start -XPOST \
   --data '
      {
         "source": "cluster0",
         "destination": "cluster1",
         ...,
         "destinationDataHandling": "dropAllData"
      } '

If you use ``"dropAllData"``, you need the :authrole:`clusterAdmin` or
:authrole:`dbAdmin` role.

Learn More
----------
