.. _c2c-limitations:

===========
Limitations
===========


.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. warning::

   ``mongosync`` does not check for compliance with the documented
   limitations. Please ensure that your application is not affected by
   the limitations. Running ``mongosync`` in the presence of one of
   these limitations could lead to undefined behavior on the destination
   cluster.

General Limitations
-------------------

.. note::

  For information on MongoDB server compatility, see
  :ref:`c2c-server-version-compatibility`.

- The destination cluster must be empty.
- ``mongosync`` doesn't validate that the clusters or the environment
  are properly configured.
- Other clients must not write to the destination cluster while
  ``mongosync`` is running.
- If write blocking is disabled, the client must :ref:`prevent writes
  <c2c-api-start>` to the source cluster before starting the commit
  process.
- :ref:`system.* collections <metadata-system-collections>` aren't
  replicated.
- Documents that have dollar (``$``) prefixed field names aren't
  supported. See :ref:`Field Names with Periods and Dollar Signs
  <crud-concepts-dot-dollar-considerations>`.
- Serverless clusters aren't supported.
- A MongoDB Shared Tier isn't supported.
- `Queryable Encryption
  <https://www.mongodb.com/docs/v6.0/core/queryable-encryption/>`__
  isn't supported.
- You cannot sync a collection that has a unique index and a non-unique
  index defined on the same field(s).
- .. include:: /includes/fact-atlas-require-indexes-limitation.rst
- ``mongosync`` doesn't sync users or roles.
- .. include:: /includes/fact-applyOps.rst
- ``mongosync`` must read from the source cluster using the 
  :readmode:`primary` read preference.

.. _c2c-limitations_multiple_sync:

Multiple Source Sync Limitations
--------------------------------

.. include:: /includes/many-with-one-cluster.rst

For example, consider this scenario:

- Two source clusters S1 and S2.
- A destination cluster D.
- Databases named ``inventory`` and ``sales`` on both S1 and S2.
- Collections named ``products``, ``orderLines``, ``orderStatus``, and
  ``orders`` on both S1 and S2.
- You can sync both of these combinations:

  - ``inventory.products`` and ``sales.orderStatus`` on S1 with D.
  - ``inventory.orderLines`` and ``sales.orders`` on S2 with D.

- You cannot sync both of these combinations because they conflict:

  - ``inventory.products`` and ``inventory.orderLines`` on S1 with D. If
    D is initially empty, you can sync S1 with D. ``inventory.products``
    and ``inventory.orderLines`` are copied from S1 to D.
  - ``inventory.products`` and ``inventory.orderLines`` on S2 with D.
    You cannot sync S2 with D because ``inventory.products`` and
    ``inventory.orderLines`` conflict with the namespaces already on D
    from the scenario in the previous point.

A namespace is a ``database_name.collection_name`` combination.

- You can only sync namespaces that don't conflict.
- For views, you must ensure source view names don't conflict with
  existing destination view names.

MongoDB Community Edition
-------------------------

MongoDB does not test {+c2c-product-name+} with Community builds and in
most cases, MongoDB does not offer support for {+c2c-product-name+} with
Community deployments. If you would like to use {+c2c-product-name+}
with MongoDB Community Edition, contact a MongoDB sales representative
to discuss requirements and individualized options.

Unsupported Collection Types
----------------------------

- Time-series collections aren't supported.
- Clustered collections with :ref:`expireAfterSeconds
  <db.createCollection.expireAfterSeconds>` set aren't supported.

.. _c2c-sharded-limitations:

Sharded Clusters
----------------

- ``mongosync`` doesn't support sync from a sharded cluster
  to a replica set.
- ``mongosync`` doesn't support sync to a sharded cluster 
  topology with one or more arbiters.
- Sync from a replica set to a sharded cluster has the following
  limitations:

  - ``mongosync`` allows users to rename collections that the
    ``sharding.shardingEntries`` option for the :ref:`c2c-api-start`
    command includes during sync. To see limitations on renaming
    collections while ``mongosync`` is running, see :ref:`Renaming
    During Sync <rename-during-sync>`.
  - When using the ``sharding.createSupportingIndexes`` option to create
    indexes supporting shard keys on the destination cluster during
    sync, you cannot create these indexes afterwards on the source
    cluster.

    The index must either exist before ``mongosync`` starts or be
    created after the migration is complete and ``mongosync`` has
    stopped.

- Within a collection, the ``_id`` field must be unique across all of
  the shards in the cluster. See :ref:`sharded-clusters-unique-indexes`
  for more details.
- The :dbcommand:`movePrimary` command cannot be used to reassign the
  primary shard while syncing.
- There is no replication for zone configuration. ``mongosync``
  replicates data, it doesn't inherit zones.
- Shards cannot be added or removed while syncing.
- ``mongosync`` only syncs indexes that exist on all shards.
- ``mongosync`` only syncs indexes that have consistent index
  specifications on all shards.

  .. note::

     To check for index inconsistencies, see :ref:`Find Inconsistent
     Indexes Across Shards <manage-indexes-find-inconsistent-indexes>`.

- You must stop the balancer on a sharded source cluster until
  mongosync finishes the collection copy phase.

  .. note::

     After stopping the balancer, wait fifteen minutes before
     starting ``mongosync``. This gives the cluster time to
     finish any in progress chunk migrations.

- You must not run the :dbcommand:`moveChunk` and
  :dbcommand:`moveRange` commands on the source cluster.
- The shard key cannot be :ref:`refined <shard-key-refine>` while
  syncing.
- The :dbcommand:`reshardCollection` operations from the source cluster
  are not supported during sync. 
- The maximum number of indexes per sharded collection is 63, which is
  one less than the :ref:`default limit
  <limit-number-of-indexes-per-collection>` of 64.
- ``mongosync`` only supports syncing sharded collections that have
  default :ref:`collation <collation>` settings.

Reversing
---------

- If the old source has :ref:`unique indexes <index-type-unique>` which
  are partially distributed across shards, reversing may cause failures.
  Ensure that unique indexes exist on all shards before reversing.
- .. include:: /includes/fact-reverse-limitation.rst

.. _multiple-clusters-limitations:

Multiple Clusters
-----------------

- ``mongosync`` does not support syncing multiple source clusters to one
  destination cluster. 
- One cluster cannot simultaneously be a source cluster in one
  ``mongosync`` instance and a destination cluster in another
  ``mongosync`` instance. 

.. _c2c-filtering-limitations:

Filtered Sync
-------------

.. include:: /includes/limitations-filtering.rst

Capped Collections
------------------

.. include:: /includes/collections/behavior-capped-collections.rst

System Collections
------------------

.. include:: /includes/collections/behavior-system-collections.rst
